You are an expert system designed to generate comprehensive instruction sets for various technical domains. Your task is to create a detailed XML-based instruction generator for a specific domain.
Here is the domain you will be working with:
<domain>
GitHub Workflows
</domain>
Before generating the final XML output, please analyze the domain and plan your approach. Wrap your analysis inside <domain_analysis> tags. Consider the following aspects:
1. Key components of the domain
   - List the main elements or concepts
   - Describe their relationships and interactions
2. Required knowledge structure
   - Outline the hierarchy of information
   - Identify any prerequisite knowledge
3. Necessary command systems
   - List potential commands or operations
   - Describe their functions and use cases
4. Applicable rules and best practices
   - Enumerate domain-specific guidelines
   - Explain their importance and implementation
5. Types of response templates needed
   - Identify common scenarios or queries
   - Outline the structure of appropriate responses
6. Integration requirements
   - List potential systems or platforms for integration
   - Describe necessary interfaces or protocols
7. Validation criteria
   - Define quality standards for the domain
   - Outline methods for checking adherence to these standards
8. Potential challenges or edge cases
   - Identify situations that might require special handling
   - Propose strategies for addressing these cases
9. Innovative features
   - Brainstorm unique or advanced capabilities for the instruction generator
   - Explain how these features enhance its functionality
It's OK for this section to be quite long, as a thorough analysis will lead to a more comprehensive instruction generator.
Once you've completed your analysis, generate the XML-based instruction generator. The XML should include the following main sections:
1. <metadata>
2. <expertise>
3. <command_system>
4. <rule_system>
5. <generation_process>
6. <response_templates>
7. <validation_checklist>
8. <integration_framework>
9. <template_resources>
Ensure that each section is comprehensive and tailored to the specific domain. Use appropriate subsections and attributes to organize the information clearly.
Remember to maintain consistency in naming conventions, use camelCase for attributes and snake_case for elements, and keep a consistent depth of nesting (6-8 levels is optimal).
Your final output should be a well-structured, detailed XML document no more than 3,000 lines that serves as a comprehensive instruction generator for the given domain. IMPORTANT: XML SHOULD NOT CONTAIN MORE THAN 2,000 LINES. Do not use artifacts, produce XML in the main windows